#include <stdio.h>

#define MAX_BLOCKS 50
#define MAX_REQUESTS 50

struct MemoryBlock {
    int size;
    int allocated;
};

void firstFit(struct MemoryBlock blocks[], int m, int requests[], int n) {
    for (int i = 0; i < n; i++) {
        int found = 0;
        
        // Find the first block that fits the request
        for (int j = 0; j < m; j++) {
            if (!blocks[j].allocated && blocks[j].size >= requests[i]) {
                blocks[j].allocated = 1;
                printf("Allocated memory block %d for request %d\n", j, i);
                found = 1;
                break;
            }
        }
        
        // If no suitable block found
        if (!found) {
            printf("Memory request %d cannot be allocated\n", i);
        }
    }
}

int main() {
    int m; // Number of memory blocks
    int n; // Number of memory requests
    struct MemoryBlock blocks[MAX_BLOCKS];
    int requests[MAX_REQUESTS];

    // Input memory blocks
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter the sizes of memory blocks:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &blocks[i].size);
        blocks[i].allocated = 0; // Initialize all blocks as unallocated
    }

    // Input memory requests
    printf("Enter the number of memory requests: ");
    scanf("%d", &n);
    printf("Enter the sizes of memory requests:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    // Perform first fit allocation
    firstFit(blocks, m, requests, n);

    return 0;
}
