#include <stdio.h>

#define MAX_BLOCKS 50
#define MAX_REQUESTS 50

struct MemoryBlock {
    int size;
    int allocated;
};

void bestFit(struct MemoryBlock blocks[], int m, int requests[], int n) {
    for (int i = 0; i < n; i++) {
        int bestFitIdx = -1;
        int minSpace = -1;
        
        // Find the best fit block
        for (int j = 0; j < m; j++) {
            if (!blocks[j].allocated && blocks[j].size >= requests[i]) {
                if (bestFitIdx == -1 || blocks[j].size < minSpace) {
                    bestFitIdx = j;
                    minSpace = blocks[j].size;
                }
            }
        }
        
        // Allocate memory if best fit found
        if (bestFitIdx != -1) {
            blocks[bestFitIdx].allocated = 1;
            printf("Allocated memory block %d for request %d\n", bestFitIdx, i);
        } else {
            printf("Memory request %d cannot be allocated\n", i);
        }
    }
}

int main() {
    int m; // Number of memory blocks
    int n; // Number of memory requests
    struct MemoryBlock blocks[MAX_BLOCKS];
    int requests[MAX_REQUESTS];

    // Input memory blocks
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter the sizes of memory blocks:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &blocks[i].size);
        blocks[i].allocated = 0; // Initialize all blocks as unallocated
    }

    // Input memory requests
    printf("Enter the number of memory requests: ");
    scanf("%d", &n);
    printf("Enter the sizes of memory requests:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    // Perform best fit allocation
    bestFit(blocks, m, requests, n);

    return 0;
}
